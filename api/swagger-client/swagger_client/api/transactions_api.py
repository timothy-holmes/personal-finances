# coding: utf-8

"""
    Up API

    The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TransactionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accounts_account_id_transactions_get(self, account_id, **kwargs):  # noqa: E501
        """List transactions by account  # noqa: E501

        Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_transactions_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The unique identifier for the account.  (required)
        :param int page_size: The number of records to return in each page. 
        :param TransactionStatusEnum filter_status: The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. 
        :param datetime filter_since: The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :param datetime filter_until: The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :param str filter_category: The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. 
        :param str filter_tag: A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
        :return: ListTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_account_id_transactions_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_account_id_transactions_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def accounts_account_id_transactions_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List transactions by account  # noqa: E501

        Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_account_id_transactions_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The unique identifier for the account.  (required)
        :param int page_size: The number of records to return in each page. 
        :param TransactionStatusEnum filter_status: The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. 
        :param datetime filter_since: The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :param datetime filter_until: The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :param str filter_category: The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. 
        :param str filter_tag: A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
        :return: ListTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page_size', 'filter_status', 'filter_since', 'filter_until', 'filter_category', 'filter_tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_transactions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_transactions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('page[size]', params['page_size']))  # noqa: E501
        if 'filter_status' in params:
            query_params.append(('filter[status]', params['filter_status']))  # noqa: E501
        if 'filter_since' in params:
            query_params.append(('filter[since]', params['filter_since']))  # noqa: E501
        if 'filter_until' in params:
            query_params.append(('filter[until]', params['filter_until']))  # noqa: E501
        if 'filter_category' in params:
            query_params.append(('filter[category]', params['filter_category']))  # noqa: E501
        if 'filter_tag' in params:
            query_params.append(('filter[tag]', params['filter_tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transactions_get(self, **kwargs):  # noqa: E501
        """List transactions  # noqa: E501

        Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transactions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records to return in each page. 
        :param TransactionStatusEnum filter_status: The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. 
        :param datetime filter_since: The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :param datetime filter_until: The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :param str filter_category: The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. 
        :param str filter_tag: A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
        :return: ListTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transactions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.transactions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def transactions_get_with_http_info(self, **kwargs):  # noqa: E501
        """List transactions  # noqa: E501

        Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transactions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records to return in each page. 
        :param TransactionStatusEnum filter_status: The transaction status for which to return records. This can be used to filter `HELD` transactions from those that are `SETTLED`. 
        :param datetime filter_since: The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :param datetime filter_until: The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
        :param str filter_category: The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a `404` response. 
        :param str filter_tag: A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
        :return: ListTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'filter_status', 'filter_since', 'filter_until', 'filter_category', 'filter_tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transactions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('page[size]', params['page_size']))  # noqa: E501
        if 'filter_status' in params:
            query_params.append(('filter[status]', params['filter_status']))  # noqa: E501
        if 'filter_since' in params:
            query_params.append(('filter[since]', params['filter_since']))  # noqa: E501
        if 'filter_until' in params:
            query_params.append(('filter[until]', params['filter_until']))  # noqa: E501
        if 'filter_category' in params:
            query_params.append(('filter[category]', params['filter_category']))  # noqa: E501
        if 'filter_tag' in params:
            query_params.append(('filter[tag]', params['filter_tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transactions_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieve transaction  # noqa: E501

        Retrieve a specific transaction by providing its unique identifier.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transactions_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The unique identifier for the transaction.  (required)
        :return: GetTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transactions_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.transactions_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def transactions_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve transaction  # noqa: E501

        Retrieve a specific transaction by providing its unique identifier.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transactions_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The unique identifier for the transaction.  (required)
        :return: GetTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transactions_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `transactions_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer_auth']  # noqa: E501

        return self.api_client.call_api(
            '/transactions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
