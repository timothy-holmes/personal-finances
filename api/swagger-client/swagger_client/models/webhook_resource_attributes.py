# coding: utf-8

"""
    Up API

    The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookResourceAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'description': 'str',
        'secret_key': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'url': 'url',
        'description': 'description',
        'secret_key': 'secretKey',
        'created_at': 'createdAt'
    }

    def __init__(self, url=None, description=None, secret_key=None, created_at=None):  # noqa: E501
        """WebhookResourceAttributes - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._description = None
        self._secret_key = None
        self._created_at = None
        self.discriminator = None
        self.url = url
        self.description = description
        if secret_key is not None:
            self.secret_key = secret_key
        self.created_at = created_at

    @property
    def url(self):
        """Gets the url of this WebhookResourceAttributes.  # noqa: E501

        The URL that this webhook is configured to `POST` events to.   # noqa: E501

        :return: The url of this WebhookResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookResourceAttributes.

        The URL that this webhook is configured to `POST` events to.   # noqa: E501

        :param url: The url of this WebhookResourceAttributes.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def description(self):
        """Gets the description of this WebhookResourceAttributes.  # noqa: E501

        An optional description that was provided at the time the webhook was created.   # noqa: E501

        :return: The description of this WebhookResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebhookResourceAttributes.

        An optional description that was provided at the time the webhook was created.   # noqa: E501

        :param description: The description of this WebhookResourceAttributes.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def secret_key(self):
        """Gets the secret_key of this WebhookResourceAttributes.  # noqa: E501

        A shared secret key used to sign all webhook events sent to the configured webhook URL. This field is returned only once, upon the initial creation of the webhook. If lost, create a new webhook and delete this webhook.  The webhook URL receives a request with a `X-Up-Authenticity-Signature` header, which is the SHA-256 HMAC of the entire raw request body signed using this `secretKey`. It is advised to compute and check this signature to verify the authenticity of requests sent to the webhook URL. See [Handling webhook events](#callback_post_webhookURL) for full details.   # noqa: E501

        :return: The secret_key of this WebhookResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this WebhookResourceAttributes.

        A shared secret key used to sign all webhook events sent to the configured webhook URL. This field is returned only once, upon the initial creation of the webhook. If lost, create a new webhook and delete this webhook.  The webhook URL receives a request with a `X-Up-Authenticity-Signature` header, which is the SHA-256 HMAC of the entire raw request body signed using this `secretKey`. It is advised to compute and check this signature to verify the authenticity of requests sent to the webhook URL. See [Handling webhook events](#callback_post_webhookURL) for full details.   # noqa: E501

        :param secret_key: The secret_key of this WebhookResourceAttributes.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def created_at(self):
        """Gets the created_at of this WebhookResourceAttributes.  # noqa: E501

        The date-time at which this webhook was created.   # noqa: E501

        :return: The created_at of this WebhookResourceAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WebhookResourceAttributes.

        The date-time at which this webhook was created.   # noqa: E501

        :param created_at: The created_at of this WebhookResourceAttributes.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookResourceAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookResourceAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
