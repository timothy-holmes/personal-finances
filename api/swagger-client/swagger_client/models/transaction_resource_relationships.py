# coding: utf-8

"""
    Up API

    The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionResourceRelationships(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'TransactionResourceRelationshipsAccount',
        'transfer_account': 'TransactionResourceRelationshipsTransferAccount',
        'category': 'TransactionResourceRelationshipsCategory',
        'parent_category': 'CategoryResourceRelationshipsParent',
        'tags': 'TransactionResourceRelationshipsTags'
    }

    attribute_map = {
        'account': 'account',
        'transfer_account': 'transferAccount',
        'category': 'category',
        'parent_category': 'parentCategory',
        'tags': 'tags'
    }

    def __init__(self, account=None, transfer_account=None, category=None, parent_category=None, tags=None):  # noqa: E501
        """TransactionResourceRelationships - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._transfer_account = None
        self._category = None
        self._parent_category = None
        self._tags = None
        self.discriminator = None
        self.account = account
        self.transfer_account = transfer_account
        self.category = category
        self.parent_category = parent_category
        self.tags = tags

    @property
    def account(self):
        """Gets the account of this TransactionResourceRelationships.  # noqa: E501


        :return: The account of this TransactionResourceRelationships.  # noqa: E501
        :rtype: TransactionResourceRelationshipsAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this TransactionResourceRelationships.


        :param account: The account of this TransactionResourceRelationships.  # noqa: E501
        :type: TransactionResourceRelationshipsAccount
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def transfer_account(self):
        """Gets the transfer_account of this TransactionResourceRelationships.  # noqa: E501


        :return: The transfer_account of this TransactionResourceRelationships.  # noqa: E501
        :rtype: TransactionResourceRelationshipsTransferAccount
        """
        return self._transfer_account

    @transfer_account.setter
    def transfer_account(self, transfer_account):
        """Sets the transfer_account of this TransactionResourceRelationships.


        :param transfer_account: The transfer_account of this TransactionResourceRelationships.  # noqa: E501
        :type: TransactionResourceRelationshipsTransferAccount
        """
        if transfer_account is None:
            raise ValueError("Invalid value for `transfer_account`, must not be `None`")  # noqa: E501

        self._transfer_account = transfer_account

    @property
    def category(self):
        """Gets the category of this TransactionResourceRelationships.  # noqa: E501


        :return: The category of this TransactionResourceRelationships.  # noqa: E501
        :rtype: TransactionResourceRelationshipsCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TransactionResourceRelationships.


        :param category: The category of this TransactionResourceRelationships.  # noqa: E501
        :type: TransactionResourceRelationshipsCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def parent_category(self):
        """Gets the parent_category of this TransactionResourceRelationships.  # noqa: E501


        :return: The parent_category of this TransactionResourceRelationships.  # noqa: E501
        :rtype: CategoryResourceRelationshipsParent
        """
        return self._parent_category

    @parent_category.setter
    def parent_category(self, parent_category):
        """Sets the parent_category of this TransactionResourceRelationships.


        :param parent_category: The parent_category of this TransactionResourceRelationships.  # noqa: E501
        :type: CategoryResourceRelationshipsParent
        """
        if parent_category is None:
            raise ValueError("Invalid value for `parent_category`, must not be `None`")  # noqa: E501

        self._parent_category = parent_category

    @property
    def tags(self):
        """Gets the tags of this TransactionResourceRelationships.  # noqa: E501


        :return: The tags of this TransactionResourceRelationships.  # noqa: E501
        :rtype: TransactionResourceRelationshipsTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TransactionResourceRelationships.


        :param tags: The tags of this TransactionResourceRelationships.  # noqa: E501
        :type: TransactionResourceRelationshipsTags
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionResourceRelationships, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionResourceRelationships):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
