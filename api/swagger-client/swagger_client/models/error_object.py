# coding: utf-8

"""
    Up API

    The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ErrorObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'title': 'str',
        'detail': 'str',
        'source': 'ErrorObjectSource'
    }

    attribute_map = {
        'status': 'status',
        'title': 'title',
        'detail': 'detail',
        'source': 'source'
    }

    def __init__(self, status=None, title=None, detail=None, source=None):  # noqa: E501
        """ErrorObject - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._title = None
        self._detail = None
        self._source = None
        self.discriminator = None
        self.status = status
        self.title = title
        self.detail = detail
        if source is not None:
            self.source = source

    @property
    def status(self):
        """Gets the status of this ErrorObject.  # noqa: E501

        The HTTP status code associated with this error. This can also be obtained from the response headers. The status indicates the broad type of error according to HTTP semantics.   # noqa: E501

        :return: The status of this ErrorObject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorObject.

        The HTTP status code associated with this error. This can also be obtained from the response headers. The status indicates the broad type of error according to HTTP semantics.   # noqa: E501

        :param status: The status of this ErrorObject.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def title(self):
        """Gets the title of this ErrorObject.  # noqa: E501

        A short description of this error. This should be stable across multiple occurrences of this type of error and typically expands on the reason for the status code.   # noqa: E501

        :return: The title of this ErrorObject.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ErrorObject.

        A short description of this error. This should be stable across multiple occurrences of this type of error and typically expands on the reason for the status code.   # noqa: E501

        :param title: The title of this ErrorObject.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def detail(self):
        """Gets the detail of this ErrorObject.  # noqa: E501

        A detailed description of this error. This should be considered unique to individual occurrences of an error and subject to change. It is useful for debugging purposes.   # noqa: E501

        :return: The detail of this ErrorObject.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ErrorObject.

        A detailed description of this error. This should be considered unique to individual occurrences of an error and subject to change. It is useful for debugging purposes.   # noqa: E501

        :param detail: The detail of this ErrorObject.  # noqa: E501
        :type: str
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")  # noqa: E501

        self._detail = detail

    @property
    def source(self):
        """Gets the source of this ErrorObject.  # noqa: E501


        :return: The source of this ErrorObject.  # noqa: E501
        :rtype: ErrorObjectSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ErrorObject.


        :param source: The source of this ErrorObject.  # noqa: E501
        :type: ErrorObjectSource
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
