# coding: utf-8

"""
    Up API

    The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MoneyObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_code': 'str',
        'value': 'str',
        'value_in_base_units': 'int'
    }

    attribute_map = {
        'currency_code': 'currencyCode',
        'value': 'value',
        'value_in_base_units': 'valueInBaseUnits'
    }

    def __init__(self, currency_code=None, value=None, value_in_base_units=None):  # noqa: E501
        """MoneyObject - a model defined in Swagger"""  # noqa: E501
        self._currency_code = None
        self._value = None
        self._value_in_base_units = None
        self.discriminator = None
        self.currency_code = currency_code
        self.value = value
        self.value_in_base_units = value_in_base_units

    @property
    def currency_code(self):
        """Gets the currency_code of this MoneyObject.  # noqa: E501

        The ISO 4217 currency code.   # noqa: E501

        :return: The currency_code of this MoneyObject.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this MoneyObject.

        The ISO 4217 currency code.   # noqa: E501

        :param currency_code: The currency_code of this MoneyObject.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def value(self):
        """Gets the value of this MoneyObject.  # noqa: E501

        The amount of money, formatted as a string in the relevant currency. For example, for an Australian dollar value of $10.56, this field will be `\"10.56\"`. The currency symbol is not included in the string.   # noqa: E501

        :return: The value of this MoneyObject.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MoneyObject.

        The amount of money, formatted as a string in the relevant currency. For example, for an Australian dollar value of $10.56, this field will be `\"10.56\"`. The currency symbol is not included in the string.   # noqa: E501

        :param value: The value of this MoneyObject.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def value_in_base_units(self):
        """Gets the value_in_base_units of this MoneyObject.  # noqa: E501

        The amount of money in the smallest denomination for the currency, as a 64-bit integer.  For example, for an Australian dollar value of $10.56, this field will be `1056`.   # noqa: E501

        :return: The value_in_base_units of this MoneyObject.  # noqa: E501
        :rtype: int
        """
        return self._value_in_base_units

    @value_in_base_units.setter
    def value_in_base_units(self, value_in_base_units):
        """Sets the value_in_base_units of this MoneyObject.

        The amount of money in the smallest denomination for the currency, as a 64-bit integer.  For example, for an Australian dollar value of $10.56, this field will be `1056`.   # noqa: E501

        :param value_in_base_units: The value_in_base_units of this MoneyObject.  # noqa: E501
        :type: int
        """
        if value_in_base_units is None:
            raise ValueError("Invalid value for `value_in_base_units`, must not be `None`")  # noqa: E501

        self._value_in_base_units = value_in_base_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MoneyObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MoneyObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
